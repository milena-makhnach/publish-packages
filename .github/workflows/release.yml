name: Build, Test and Release
# Limit main to one build at a time to prevent any race conditions
concurrency: master

on:
  push:
    branches:
      - master

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      changes: ${{ steps.version.outputs.changes }} # map step output to job output
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Enable node
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      # This step will run changeset version, setting the step output to if there were changesets found
      - name: Version command
        id: version
        run: |
          npm install --no-package-lock --no-save @changesets/cli
          echo ::set-output name=changes::$(npx changeset version 2>&1 | grep -q 'No unreleased changesets found' && echo 'false' || echo 'true')
      # Push the updated package.json, and CHANGESET.md files to github, this will trigger a new build
      # the || echo 'No changes' is to ignore errors from git when trying to commit and there are no changes
      - name: Push changes
        if: steps.version.outputs.changes == 'true'
        run: |
          git config user.email "<email>"
          git config user.name "<name>"
          git add -A
          git commit -m "Version packages" || echo "No changes to commit"
          git push
  build:
    runs-on: ubuntu-latest
    needs: version
    # This will only run if there were no changesets.
    ## the next triggered build from the push will then pass this step and continue with the release
    if: always() && needs.version.outputs.changes == 'false'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Enable node
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

        #### Your install/Build/Test/Package steps here

      - name: Release packages
        uses: changesets/action@v1
        with:
          publish: yarn publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN  }}


# name: release

# on:
#   push:
#     branches:
#       - master

# jobs:
#   release:
#     timeout-minutes: 20
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#       - uses: actions/setup-node@v4
#         with:
#           node-version: 20.x
#       - name: install dependencies
#         run: yarn install
#       - name: Create Release Pull Request or Publish to npm
#         uses: changesets/action@v1
#         with:
#           publish: npm run publish
#           commit: "chore: new release"
#           title: "chore: new release candidate"
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      
#       - name: Send a Slack notification if a publish happens
#         if: steps.changesets.outputs.published == 'true'
#           # You can do something when a publish happens.
#         run: my-slack-bot send-notification --message "A new version of ${GITHUB_REPOSITORY} was published!"